{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "withdrawLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "bankCap",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "ethUsdFeed",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ErrAliasTaken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "attempted",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "available",
						"type": "uint256"
					}
				],
				"name": "ErrBankCapExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ErrContactNotFound",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "available",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "requested",
						"type": "uint256"
					}
				],
				"name": "ErrInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ErrInvalidContact",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ErrNativeTransferFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "ethLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "requested",
						"type": "uint256"
					}
				],
				"name": "ErrWithdrawLimitExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ErrZeroDeposit",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contact",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newLimit",
						"type": "uint256"
					}
				],
				"name": "ContactLimitUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contact",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "alias_",
						"type": "string"
					}
				],
				"name": "ContactRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contact",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "alias_",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ethLimit",
						"type": "uint256"
					}
				],
				"name": "ContactSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBalance",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "InternalTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBalance",
						"type": "uint256"
					}
				],
				"name": "Withdrawal",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "BANK_CAP",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "WITHDRAW_LIMIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "usd8",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxSlippageBps",
						"type": "uint256"
					}
				],
				"name": "depositByUSD",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "depositCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ethUsd",
				"outputs": [
					{
						"internalType": "contract AggregatorV3Interface",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBankTotalBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "contact",
						"type": "address"
					}
				],
				"name": "getContact",
				"outputs": [
					{
						"internalType": "string",
						"name": "alias_",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "alias_",
						"type": "string"
					}
				],
				"name": "getContactByAlias",
				"outputs": [
					{
						"internalType": "address",
						"name": "contact",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getVaultBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "usd8",
						"type": "uint256"
					}
				],
				"name": "quoteWeiForUsd",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "weiReq",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contact",
						"type": "address"
					}
				],
				"name": "removeContact",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contact",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "alias_",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "ethLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "usdLimit",
						"type": "uint256"
					}
				],
				"name": "setContact",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "alias_",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferToAlias",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contact",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferToContact",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "alias_",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "usd8",
						"type": "uint256"
					}
				],
				"name": "transferUSDToAlias",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "usd8",
						"type": "uint256"
					}
				],
				"name": "transferUSDToContact",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contact",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "newLimit",
						"type": "uint256"
					}
				],
				"name": "updateContactLimit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Facundo Delgado",
			"details": "- Guarda saldos por dirección en storage interno (no ERC-20). - Límites inmutables: `BANK_CAP` (cap global de depósitos simultáneos) y `WITHDRAW_LIMIT` (retiro máximo por tx). - Soporta “monto en USD” usando Chainlink ETH/USD, pero almacena en wei. - Seguridad: patrón checks-effects-interactions, `Ownable2Step`, `Pausable`. - No hay iteración sobre mappings; para alias se indexa vía hash. - Las transferencias internas solo mueven saldos del mapping. El ETH real se mueve en `withdraw`.",
			"errors": {
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "The new owner accepts the ownership transfer."
				},
				"constructor": {
					"params": {
						"bankCap": "tope global del banco",
						"ethUsdFeed": "feed de precio de ETH/USD",
						"initialOwner": "dueño inicial que deberá aceptar si se usa transferOwnership luego",
						"withdrawLimit": "límite por retiro"
					}
				},
				"deposit()": {
					"custom:reverts": "ErrZeroDeposit si `msg.value == 0`.ErrBankCapExceeded si supera el tope global.",
					"details": "Requiere `whenNotPaused`. Verifica `BANK_CAP`. Emite `Deposit`."
				},
				"depositByUSD(uint256,uint256)": {
					"custom:error": "\"slippage\" si `msg.value` se desvía más que `maxSlippageBps` del `quote`.",
					"custom:reverts": "ErrZeroDeposit si `usd8 == 0`.ErrBankCapExceeded si supera el tope global.",
					"details": "Requiere `whenNotPaused`. Usa Chainlink ETH/USD. Verifica `slippage` y `BANK_CAP`.",
					"params": {
						"maxSlippageBps": "tolerancia en basis points (100 = 1%).",
						"usd8": "monto objetivo en USD con 8 decimales (1 USD = 1e8)."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"pendingOwner()": {
					"details": "Returns the address of the pending owner."
				},
				"removeContact(address)": {
					"custom:reverts": "ErrContactNotFound si no existe.",
					"details": "Limpia el índice de alias. Emite `ContactRemoved`.",
					"params": {
						"contact": "dirección del contacto a remover."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setContact(address,string,uint256,uint256)": {
					"custom:reverts": "ErrInvalidContact si `contact == address(0)`.ErrAliasTaken si el alias ya está tomado por otro contacto del mismo owner.",
					"details": "Mantiene índice de alias por hash. Emite `ContactSet`.",
					"params": {
						"alias_": "alias legible.",
						"contact": "dirección del contacto.",
						"ethLimit": "límite por transferencia interna en wei (0 = sin tope).",
						"usdLimit": "límite por transferencia “en USD” convertido a wei (0 = sin tope)."
					}
				},
				"transferOwnership(address)": {
					"details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
				},
				"transferToAlias(string,uint256)": {
					"custom:reverts": "ErrContactNotFound si el alias no resuelve a un contacto válido.ErrWithdrawLimitExceeded si excede `ethLimit` del contacto.ErrInsufficientBalance si saldo insuficiente.",
					"details": "Requiere `whenNotPaused`. Emite `InternalTransfer`.",
					"params": {
						"alias_": "alias del contacto.",
						"amount": "monto en wei."
					}
				},
				"transferToContact(address,uint256)": {
					"custom:reverts": "ErrContactNotFound si el contacto no existe.ErrWithdrawLimitExceeded si excede `ethLimit` del contacto.ErrInsufficientBalance si saldo insuficiente.",
					"details": "Requiere `whenNotPaused`. Emite `InternalTransfer`.",
					"params": {
						"amount": "monto en wei.",
						"contact": "receptor interno."
					}
				},
				"transferUSDToAlias(string,uint256)": {
					"custom:reverts": "ErrContactNotFound si el alias no existe.ErrWithdrawLimitExceeded si excede `usdLimit` en wei calculado.ErrInsufficientBalance si saldo insuficiente.",
					"details": "Convierte con precio actual, mueve wei. Requiere `whenNotPaused`.",
					"params": {
						"alias_": "alias del contacto.",
						"usd8": "monto en USD con 8 decimales."
					}
				},
				"transferUSDToContact(address,uint256)": {
					"custom:reverts": "ErrContactNotFound si no existe el contacto.ErrWithdrawLimitExceeded si excede `usdLimit` en wei calculado.ErrInsufficientBalance si saldo insuficiente.",
					"details": "Convierte con precio actual, mueve wei. Requiere `whenNotPaused`.",
					"params": {
						"to": "dirección del contacto.",
						"usd8": "monto en USD con 8 decimales."
					}
				},
				"updateContactLimit(address,uint256)": {
					"custom:reverts": "ErrContactNotFound si no existe.",
					"params": {
						"contact": "dirección del contacto.",
						"newLimit": "nuevo límite en wei (0 = sin tope)."
					}
				},
				"withdraw(uint256)": {
					"custom:reverts": "ErrZeroDeposit si `amount == 0`.ErrWithdrawLimitExceeded si `amount > WITHDRAW_LIMIT`.ErrInsufficientBalance si saldo insuficiente.ErrNativeTransferFailed si `call` falla.",
					"details": "Requiere `whenNotPaused`. Aplica `WITHDRAW_LIMIT`. Emite `Withdrawal`.",
					"params": {
						"amount": "monto en wei."
					}
				}
			},
			"title": "KipuBank",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"deposit()": {
					"notice": "Deposita ETH en la bóveda del remitente."
				},
				"depositByUSD(uint256,uint256)": {
					"notice": "Deposita pensando en USD pero enviando ETH; guarda en wei."
				},
				"quoteWeiForUsd(uint256)": {
					"notice": "USD con 8 dec (1 USD = 1e8). Devuelve wei necesarios (redondeo hacia arriba)."
				},
				"removeContact(address)": {
					"notice": "Elimina un contacto del `msg.sender`."
				},
				"setContact(address,string,uint256,uint256)": {
					"notice": "Crea o actualiza un contacto del `msg.sender`."
				},
				"transferToAlias(string,uint256)": {
					"notice": "Transfiere internamente `amount` wei resolviendo el receptor por alias."
				},
				"transferToContact(address,uint256)": {
					"notice": "Transfiere internamente `amount` wei a un contacto existente."
				},
				"transferUSDToAlias(string,uint256)": {
					"notice": "Transfiere internamente un monto equivalente a `usd8` USD hacia un alias."
				},
				"transferUSDToContact(address,uint256)": {
					"notice": "Transfiere internamente un monto equivalente a `usd8` USD hacia un contacto."
				},
				"updateContactLimit(address,uint256)": {
					"notice": "Actualiza el límite `ethLimit` de un contacto."
				},
				"withdraw(uint256)": {
					"notice": "Retira `amount` wei de la bóveda del remitente hacia su wallet."
				}
			},
			"notice": "Bóveda custodial en ETH con contactos y transferencias internas.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/KipuBank.sol": "KipuBank"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
			"keccak256": "0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9",
				"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/access/Ownable2Step.sol": {
			"keccak256": "0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c",
			"license": "MIT",
			"urls": [
				"bzz-raw://e2c9d517f0c136d54bd00cd57959d25681d4d6273f5bbbc263afe228303772f0",
				"dweb:/ipfs/QmReNFjXBiufByiAAzfSQ2SM5r3qeUErn46BmN3yVRvrek"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Pausable.sol": {
			"keccak256": "0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f",
			"license": "MIT",
			"urls": [
				"bzz-raw://f9d6f6f6600a2bec622f699081b58350873b5e63ce05464d17d674a290bb8a7c",
				"dweb:/ipfs/QmQKVzSQY1PM3Bid4QhgVVZyx6B4Jx7XgaQzLKHj38vJz8"
			]
		},
		"contracts/KipuBank.sol": {
			"keccak256": "0x4a30f711135dc301d27f8d35f86181b6e2594a17828c34bd17f6c262536fb6b6",
			"license": "MIT",
			"urls": [
				"bzz-raw://d21599c55a2504a138cdd211faeeb9def579bc2e3f1935862fecbaafd48fe9dd",
				"dweb:/ipfs/QmczgJqeGsVPanJnpQpCdAmh2b5pFspMdEgUMoSQZnTQVu"
			]
		}
	},
	"version": 1
}